#+AUTHOR: Paul M Lambert 
#+EMAIL: lambertington@gmail.com
#+STARTUP: hidestars
#+OPTIONS: toc:nil

* TODO org-to-ghpages 
  SCHEDULED: <2015-08-03 Mon>
This is a small emacs script for exporting org-mode TODO list subtrees to GitHub Flavored Markdown for usage on a Jekyll-powered blog or GitHub project. 

** A Visual Guide
Let's say we have all of our blog posts as =TODO= items in an org file. 
[[file:https://github.com/lambertington/org-to-ghpages/blob/master/images/emacs1.png]]

This has practical value, as we can get automatic reminders about writing and quickly refactor posts.
[[file:https://github.com/lambertington/org-to-ghpages/blob/master/images/emacs2.png]]

Once we're done, we export to GitHub Flavored Markdown for posting to our Jekyll blog using gh-pages!Hit =C-c C-e g G= to put it in a buffer...
[[file:https://github.com/lambertington/org-to-ghpages/blob/master/images/emacs3.png]]

Or we can just hit =C-c C-e g g= to export it directly to our blog (assuming we've set up our default directory properly).
[[file:https://github.com/lambertington/org-to-ghpages/blob/master/images/emacs4.png]]

And bam, that's all you have to do. From here you can run your blog locally to make sure everything's peachy, or just =git push= off to victory.

Easy peasy.

** Quick Start
Place =org-to-ghpages.el= somewhere in your Emacs' load path, and then add the following lines to your init.el:

#+BEGIN_SRC emacs-lisp
  (require 'org-to-ghpages)
  (setq org-ghpages-post-dir "~/location/of/jekyll/blog/_posts/")
#+END_SRC

(To see a literate example of how /I/ use this, please refer to [[https://github.com/lambertington/dotfiles/blob/master/emacs.d/lambert-config.org#external-scripts][my init file]].)

By default, this library can be invoked by executing =C-c C-e g= from within org-mode on a =TODO= list item. Its default output is designed for GitHub Pages blogs, built upon Jekyll. Namely, it outputs a GitHub Flavored Markdown file to your specified =org-ghpages-post-dir= with smart guesses for YAML front matter data, with the file name of =YYYY-MM-DD-title-of-post.md=. 


*** Custom Options
=org-ghpages-post-dir=: The directory to export posts to. By default, they will be output to your =~/Documents= directory.

#+BEGIN_SRC emacs-lisp
(defcustom org-ghpages-post-dir (expand-file-name "~/Documents")
  "directory to save posts"
  :group 'org-export-ghpages
  :type 'directory)
#+END_SRC

-----

=org-ghpages-include-yaml-front-matter=: A boolean to determine whether you want to include YAML front matter. By default, values will include:

#+BEGIN_SRC yaml
  layout: post
  title: The TODO Text
  date: date specified by the `Scheduled` agenda date for this TODO item
  comments: true
  categories: tags taken from org-mode
  permalink: the-todo-text
#+END_SRC

If you want to export just a GitHub Flavored Markdown post, i.e. a README, set this value to nil.

=M-x set-variable [RET] org-ghpages-include-yaml-front-matter [RET] nil [RET]=

#+BEGIN_SRC emacs-lisp
(defcustom org-ghpages-include-yaml-front-matter t
  "automatically generate YAML front matter?"
  :group 'org-export-ghpages
  :type 'boolean)
#+END_SRC 

-----

=org-ghpages-layout=: What the =layout= value in your YAML front matter should be. By default, it is set to "post".

#+BEGIN_SRC emacs-lisp
(defcustom org-ghpages-layout "post"
  "define each top level as a post by default"
  :group 'org-export-ghpages
  :type 'string)
#+END_SRC

----- 

=org-ghpages-comments=: A boolean to indicate whether you want to include Disqus comments. This choice is reflected in the YAML front matter.

#+BEGIN_SRC emacs-lisp
(defcustom org-ghpages-comments t
  "include disqus comments by default"
  :group 'org-export-ghpages
  :type 'boolean)
#+END_SRC

-----

=org-ghpages-use-src-plugin=: A boolean to indicate whether you want source blocks surrounded with Pygments-style tags. 
+ If set to =t= (which is the default), your source blocks will be wrapped with ={% highlight lang %} / {% endhighlight %}= tags, where the value of =lang= is taken from your =#+BEGIN_SRC= declarations. 
+ If set to =nil=, it will wrap source blocks with the triple backquotes tags, including =lang= if it is available (again, taken from your =#+BEGIN_SRC= blocks.
 
#+BEGIN_SRC emacs-lisp
(defcustom org-ghpages-use-src-plugin t
  "if true, uses pygments-style code blocking"
  :group 'org-export-ghpages
  :type 'boolean)
#+END_SRC

*** Sensible defaults

Aside from having to set up your default export path (which is used when you use =C-c C-e g g=, or manually invoke =org-ghpages-export-to-gfm=), all of the default settings will work for exporting Jekyll/gh-pages blog posts. 

If you're trying to just export to GitHub Flavored Markdown for use in GitHub Pages (such as creating READMEs for projects), please use:

#+BEGIN_SRC emacs-lisp
  (setq org-ghpages-include-yaml-front-matter nil)
  (setq org-ghpages-use-src-block-plugin nil)
#+END_SRC

** Examples

To see a practical example of how this is used, please look at =project.org= which is in this repository. I generated both the =README.md= and =examples.md= files aginst this file.

** Requirements
This is built on top of the =ox-md= backend, which requires =org-mode= of at least version 8. I have only tested this with GNU Emacs 24.5.1, but it should work fine with versions 23+.

** Help!

+ If you're getting nasty Table of Contents HTML output with your files, make sure you have =#+OPTIONS: toc:nil= towards the top of your org file.
+ Other issues? Contact me [[https://twitter.com/lambertington][via Twitter]], or create an issue on this repo.
  
** License

Copyright (C) 2015 Paul Lambert

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.


* TODO Examples
  SCHEDULED: <2015-08-03 Mon>
  The following are example outputs for this export mode. You can check the =Examples= subheading in =project.org= and the equivalent =examples.md= for the corresponding GitHub Flavored Markdown export. This file was generated merely by setting =org-github-use-src-plugin= and =org-github-include-yaml-front-matter= both to =nil= before exporting (due to GitHub not supporting Pygments and not
needing frontmatter!)

-----

The usual *bolding* and /italicizing/ works as well, as well as +strikethrough+!

-----

Headings:

** Headline 2
*** Headline 3
**** Headline 4

-----

Inline code: =sudo apt-get update && sudo apt-get upgrade=

Tagged code-block (with org-github-use-src-plugin set to nil):

#+BEGIN_SRC emacs-lisp
  (defgroup org-export-github nil
    "Options for exporting org-mode files to Github Pages Markdown"
    :tag "Org GitHub Flavored Markdown"
    :group 'org-export
    :version "24.5.1")
#+END_SRC

-----

For blockquotes:

#+BEGIN_QUOTE
"Never trust anything you read on the internet -- especially if it
is on GitHub, HackerNews, or Reddit." - Abraham Lincoln
#+END_QUOTE

-----

Lists:

My favorite lists are (in this order):

1. Ones that are succinct
2. Ones that have some practical value
   + Like showing off functionality
   + Or, ideally, providing somewhat useful documentation
3. Ones that eventually end
   - The end is nigh!
   - Important value :: has some importance to somebody
